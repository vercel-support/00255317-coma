generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum StatusAppointment {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum CurrencyType {
  EUR
  ARS
  USD
  ILS
}

enum LocaleType {
  es_AR
  en_US
  es_ES
  he_IL
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  NEW_ORDER
  INVENTORY_UPDATE
  PAYMENT_NOTIFICATION
  LOW_STOCK_ALERT
  CLOSING_REMINDER
  PRICE_UPDATE
  PAYMENT_ERROR
  ASSISTANCE_REQUEST
  PROMOTION_NOTIFICATION
  ORDER_STATUS_UPDATE
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                 String                 @unique
  password              String
  name                  String
  lastName              String
  phone                 String
  address               String
  city                  String
  province              String
  country               String
  postalCode            String
  emailVerified         DateTime               @default(now())
  permission            Boolean                @default(false)
  image                 String?
  role                  UserRole               @default(CLIENT)
  acepTerms             Boolean                @default(false)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  employeeId            String?                @db.ObjectId
  employee              Employee?              @relation("UserToEmployee")
  notifications         Notification[]
  appointments          Appointment[]
  serviceTransaction    ServiceTransaction[]   @relation("UserToServiceTransaction")

  settings SettingsAccount? @relation("SettingsToUser")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model SettingsAccount {
  // base 
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  //initial setup
  firstSetup      Boolean    @default(true)
  // business
  sector          String
  localName       String     @unique
  localAddress    String     @unique
  localPhone      String
  localEmail      String     @unique
  localPostalCode String
  localCity       String
  localProvince   String
  localCountry    String
  localeType      LocaleType @default(es_ES)
  // payment methods
  cash_register   Boolean    @default(false)
  credit_card     Boolean    @default(false)
  debit_card      Boolean    @default(false)
  mercado_pago    Boolean    @default(false)
  pay_pal         Boolean    @default(false)

  //finance
  currencyType CurrencyType @default(EUR)
  cashReserves Float        @default(0)

  // notifications
  notificationsExpense     Boolean @default(false)
  notificationsCreditsSale Boolean @default(false)
  // relations
  userId                   String? @unique @db.ObjectId
  user                     User?   @relation("SettingsToUser", fields: [userId], references: [id])

  serviceTransactionId String?             @unique @db.ObjectId
  serviceTransaction   ServiceTransaction? @relation("SettingsToService", fields: [serviceTransactionId], references: [id])

  @@map("SettingsAccount")
}

model ServiceTransaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  expirationDate DateTime
  history        String[]
  aceptTerms     Boolean
  paymentMethod  String
  paymentStatus  String
  status         Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  // relations
  serviceId      String?           @db.ObjectId
  service        Service?          @relation("ServiceTransactionToService", fields: [serviceId], references: [id])
  settings       SettingsAccount[] @relation("SettingsToService")

  userId String? @db.ObjectId
  user   User?   @relation("UserToServiceTransaction", fields: [userId], references: [id])
}

model Service {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  price                Float
  priceIdStripe        String
  currencyType         CurrencyType         @default(USD)
  localeType           LocaleType           @default(en_US)
  duration             Int // Duration in minutes
  online               Boolean              @default(true)
  discount             Float? // Possible discount on the service
  percentageCommission Int?
  commission           Float? // Commission percentage for Digital Leads
  appointments         Appointment[]
  serviceTransaction   ServiceTransaction[] @relation("ServiceTransactionToService")
}

model Appointment {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  status     StatusAppointment @default(PENDING)
  userId     String            @db.ObjectId
  employeeId String            @db.ObjectId
  serviceId  String            @db.ObjectId
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee   Employee          @relation("EmployeeToAppointment", fields: [employeeId], references: [id], onDelete: Cascade)
  service    Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_user_id")
  @@index([employeeId], name: "idx_employee_id")
  @@index([serviceId], name: "idx_service_id")
}

model Employee {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  position     String
  user         User?         @relation("UserToEmployee", fields: [userId], references: [id])
  userId       String?       @unique @db.ObjectId
  appointments Appointment[] @relation("EmployeeToAppointment")
}

model Notification {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  notificationType NotificationType @default(INFO)
  title            String
  message          String
  link             String
  userId           String?          @db.ObjectId
  user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  read             Boolean          @default(false)
  createdAt        DateTime         @default(now())
}

model Settings {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  currencyType CurrencyType @default(USD)
  localeType   LocaleType   @default(en_US)
  cashReserves Float        @default(0)
}

model SalesMetrics {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  totalSales           Int
  totalRevenue         Float
  totalCostOperational Float
  totalCommission      Float
  netProfit            Float
  marketingBudget      Float
  conversionRate       Float
  roi                  Float // Return on Investment
  createdAt            DateTime @default(now())
}
